# This is your Prisma schema file,
# learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(APPLICANT)
  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id])
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
  profile       UserProfile?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone       String?
  location    String?
  bio         String?
  skills      String[]
  experience  String?
  education   String?
  resumeUrl   String?
  linkedinUrl String?
  githubUrl   String?
  portfolioUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  location    String?
  industry    String?
  size        String?
  founded     Int?
  verified    Boolean  @default(false)
  users       User[]
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([verified])
  @@index([slug])
}

model Job {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  description  String
  requirements String?
  benefits     String?
  location     String
  remote       Boolean   @default(false)
  salaryMin    Int?
  salaryMax    Int?
  currency     String    @default("USD")
  jobType      JobType
  experience   ExperienceLevel @default(MID_LEVEL)
  status       JobStatus @default(DRAFT)
  featured     Boolean   @default(false)
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  applications Application[]
  views        Int       @default(0)
  expiresAt    DateTime?
  publishedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status, publishedAt])
  @@index([companyId])
  @@index([categoryId])
  @@index([location])
  @@index([jobType])
  @@index([featured])
}

model Application {
  id           String            @id @default(cuid())
  jobId        String
  job          Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeUrl    String?
  coverLetter  String?
  status       ApplicationStatus @default(PENDING)
  notes        String?
  appliedAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([jobId, userId])
  @@index([userId])
  @@index([jobId])
  @@index([status])
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  icon        String?
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
}

enum Role {
  ADMIN
  COMPANY
  APPLICANT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWED
  REJECTED
  ACCEPTED
}